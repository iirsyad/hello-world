version: 2.1

orbs:
  python: circleci/python@0.2.1
  

jobs:

  build-and-test:
    parameters:
      stage:
        type: string   
  
      dbName:
        type: string
        default: aidentitytest

    # executor: python/default
    docker:
      - image: circleci/python:3.7
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: <<parameters.dbName>>
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_PASSWORD:
    
      # - image: mysql:5.7
      - image: circleci/mysql:5.7-ram
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true

      # - image: boxfuse/flyway:latest
        # command: -url=jdbc:mysql://localhost:3306 -schemas=mate -user=root  -connectRetries=10 migrate

    working_directory: ~/repo

    steps:
      - run: echo  '--template template.yaml --parameters-override AppStage=<<parameters.stage>> '
      - run: echo ' '${CIRCLE_BRANCH}'_USERPATH'
      - run:
          name: Update pipenv
          command: |
            sudo pip3 install --upgrade pipenv

      - checkout

      - run: sudo apt-get update 
      - run: sudo apt-get install -y default-mysql-client
      - run: sudo wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/6.4.4/flyway-commandline-6.4.4-linux-x64.tar.gz | tar xvz && sudo ln -s `pwd`/flyway-6.4.4/flyway /usr/local/bin 
      # - run: sudo sh -c 'echo "docker run --rm flyway/flyway:6.4.4 $*" > /usr/local/bin/flyway && chmod +x /usr/local/bin/flyway'

      - run: 
          command: |
            dir .
            pwd

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: Mysql create database
          command: mysql  -h 127.0.0.1 -u root  -e "CREATE DATABASE IF NOT EXISTS <<parameters.dbName>>;"


      - run: 
          command: |
            flyway -url=jdbc:mysql://localhost:3306 -schemas=<<parameters.dbName>> -locations=filesystem:./flyway_scripts/src -user=root migrate  


      - run: 
          command: |
            flyway -url=jdbc:mysql://localhost:3306 -schemas=<<parameters.dbName>> -user=root info  

      - run:
          command: mysql  -h 127.0.0.1 -u root  -e "use <<parameters.dbName>>; select * from AccountLevel;"



  deploy_to_target:
    parameters:
      stage:
        type: string

      serverName:
        type: string
        default: blueocean-au-dev-cluster.cluster-ro-ceqlr067xbev.us-west-2.rds.amazonaws.com

      dbName:
        type: string
        default: aidentityprod

    # executor: python/default
    docker:
      - image: circleci/python:3.7
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: <<parameters.dbName>>
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_PASSWORD:
    

    working_directory: ~/repo

    steps:
      - run: echo  '--template template.yaml --parameters-override AppStage=<<parameters.stage>> '
      - run: echo ' '${CIRCLE_BRANCH}'_USERPATH'


      - run:
          name: Update pipenv
          command: |
            sudo pip3 install --upgrade pipenv

      - checkout

      - run: sudo apt-get update 
      - run: sudo apt-get install -y default-mysql-client
      # - run: sudo apt install make
      - run: sudo wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/6.4.4/flyway-commandline-6.4.4-linux-x64.tar.gz | tar xvz && sudo ln -s `pwd`/flyway-6.4.4/flyway /usr/local/bin 
      # - run: sudo sh -c 'echo "docker run --rm flyway/flyway:6.4.4 $*" > /usr/local/bin/flyway && chmod +x /usr/local/bin/flyway'
      - run: sudo apt-get install awscli
      # 
      - run: 
          command: |
            dir .
            pwd

      - run: 
          command: |
            public_ip_address=$(wget -qO- http://checkip.amazonaws.com)
            echo "this computers public ip address is $public_ip_address"
            aws ec2 authorize-security-group-ingress --region us-west-2 --group-id sg-04ee700a973f11ef4 --ip-permissions "[{\"IpProtocol\": \"tcp\", \"FromPort\": 	3306, \"ToPort\": 	3306, \"IpRanges\": [{\"CidrIp\": \"${public_ip_address}/32\"}]}]"

      - run: aws --version

      - run:
          name: Mysql database
          command: mysql  -h <<parameters.serverName>> -u blueoceansa -p$DB_PASSWORD_<<parameters.stage>> -e "create database IF NOT EXISTS <<parameters.dbName>>;"

      - run: 
          command: |
            flyway -url=jdbc:mysql://<<parameters.serverName>>:3306/<<parameters.dbName>> -locations=filesystem:./flyway_scripts/src -user=blueoceansa -password=$DB_PASSWORD_<<parameters.stage>> migrate  

      - run: 
          command: |
            flyway -url=jdbc:mysql://<<parameters.serverName>>:3306 -schemas=<<parameters.dbName>> -user=blueoceansa -password=$DB_PASSWORD_<<parameters.stage>> info  

      - run:
          command: mysql  -h <<parameters.serverName>> -u blueoceansa -p$DB_PASSWORD_<<parameters.stage>>  -e "use <<parameters.dbName>>; select * from AccountLevel;"


      # - run:
      #     command:
        # current_security_group=$(aws ec2 describe-security-groups --region us-west-2 --group-id sg-e747959f)
        # ip_count=$(echo ${current_security_group} | jq -r '.SecurityGroups[0].IpPermissions | length')
        # if [ ${ip_count} > 0 ]; then
        #     for (( n=0; n < $ip_count; n++ ))
        #     do
        #   this_port=$(echo ${current_security_group} | jq -r ".SecurityGroups[0].IpPermissions[${n}].FromPort")
        #   cidr_count=$(echo ${current_security_group} | jq -r ".SecurityGroups[0].IpPermissions[${n}].IpRanges | length")
        #   for (( c=0; c < $cidr_count; c++ ))
        #   do
        #       this_cidr=$(echo ${current_security_group} | jq -r ".SecurityGroups[0].IpPermissions[${n}].IpRanges[${c}].CidrIp")
        #       aws ec2 revoke-security-group-ingress --region us-west-2 --group-id sg-e747959f --protocol tcp --port ${this_port} --cidr ${this_cidr}
        #   done
        #     done
        # fi


      # - setup_remote_docker

      # - run:
      #     command: docker run --rm  boxfuse/flyway:latest -url=jdbc:mysql:localhost:mate -user=root migrate
          # command: docker run --rm -v ./flyway_scripts/src:/flyway/sql boxfuse/flyway -url=jdbc:mysql:localhost:mate -user=root migrate

      # - setup_remote_docker

      # - run:
      #     command: |
      #       set -x
      #       docker-compose up

      # - run: echo  '--template template.yaml --parameters-override AppStage=<<parameters.stage>> '
      # - run: echo ' '${CIRCLE_BRANCH}'_USERPATH'
      # - checkout
      # # - setup_remote_docker:
      # #     docker_layer_caching: true
      # - setup_remote_docker
      # - run: 
      #     command: |
      #       dir .
      #       pwd
      # - run:
      #     command: |
      #       set -x
      #       docker-compose up -d

      
      # - run:
      #     name: Waiting for dockers to be ready
      #     command: |
      #       for i in `seq 1 60`;
      #       do
      #         nc -z localhost 3306 && echo Success && exit 0
      #         echo -n .
      #         sleep 1
      #       done
      #       echo Failed waiting for dockers && exit 1

      # - run: 
      #     command: |
      #       docker run --rm boxfuse/flyway -url=jdbc:mysql://blueocean-au-dev-cluster.cluster-ro-ceqlr067xbev.us-west-2.rds.amazonaws.com:3306/mate -user=blueoceansa -password=Secur3!! info


      # - checkout
      # - python/load-cache
      # - python/install-deps
      # - python/save-cache
      # - run:
      #     command: ./manage.py test
      #     name: Test

workflows:
  main:
    jobs:
      # - build-and-test:
      #     stage: blue

      - deploy_to_target:
          stage: blue
